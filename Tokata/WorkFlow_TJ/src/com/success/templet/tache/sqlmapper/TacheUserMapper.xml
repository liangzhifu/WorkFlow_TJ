<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tacheUser">
	<resultMap id="tacheUserResultMap" type="TacheUser">
		<result property="id" column="id" />
		<result property="tacheId" column="tache_id" />
		<result property="userId" column="user_id" />
		<result property="userName" column="user_name" />
		<result property="orgId" column="org_id" />
		<result property="orgName" column="org_name" />
	</resultMap>

	<select id="selectTache" resultMap="tacheUserResultMap"
		parameterType="TacheUserQuery">
		<![CDATA[
			select 
				m.tache_id, 
				m.org_id, 
				m.org_name,
				m.staff_id as user_id,
				(SELECT GROUP_CONCAT(b.`USER_NAME`)
					FROM task_tache_manager a, sys_users b
					WHERE a.`user_id` = b.`USER_ID`
					AND b.`DELETE_STATE` = '0'
					AND a.`tache_id` = m.tache_id) as user_name
			from task_tache m, task_type_tache n
		]]>
		<where>
			m.tache_id = n.tache_id
			and n.delete_state = 0
			<if test="@Ognl@isNotEmpty(tacheId)"> and m.tache_id = #{tacheId,jdbcType=NUMERIC} </if>
		</where>
	</select>

	<select id="selectTacheCount" resultType="long" parameterType="TacheUserQuery">
		<![CDATA[
			select count(1)
			from task_tache m
		]]>
	</select>
	<select id="selectTacheUser" resultMap="tacheUserResultMap"
		parameterType="TacheUserQuery">
		<![CDATA[
			select 
				a.user_id, 
				a.user_name
			from  sys_users a 	
				
		]]>
		<where>
			a.delete_state = 0
			<choose>
				<when test="tacheIdIsNot=='not'">
					and a.user_id not in (select b.user_id from task_type_tache_user b
					<where>
						b.delete_state = 0
						<if test="@Ognl@isNotEmpty(tacheId)">
							and b.tache_id = #{tacheId,jdbcType=NUMERIC}
						</if>
					</where>
					)
				</when>
				<when test="tacheIdIsNot=='all'">
					and 1 = 1
				</when>
				<otherwise>

					and a.user_id in (select b.user_id from task_type_tache_user b
					<where>
						b.delete_state = 0
						<if test="@Ognl@isNotEmpty(tacheId)">
							and b.tache_id = #{tacheId,jdbcType=NUMERIC}
						</if>
					</where>
					)
				</otherwise>
			</choose>
		</where>
	</select>

	<select id="selectTacheManagerUserList" resultMap="tacheUserResultMap"
			parameterType="TacheUserQuery">
		<![CDATA[
			select
				a.user_id,
				a.user_name
			from  sys_users a

		]]>
		<where>
			a.delete_state = 0
			<if test='managerFlag=="0"'>
				and a.user_id in (select b.user_id
				from task_tache_manager b
				where b.tache_id = #{tacheId,jdbcType=NUMERIC}
				)
			</if>
			<if test='managerFlag=="1"'>
				and a.user_id not in (select b.user_id
				from task_tache_manager b
				where b.tache_id = #{tacheId,jdbcType=NUMERIC}
				)
			</if>
		</where>
	</select>

	<select id="selectTacheManagerUserListCount" resultType="long"
			parameterType="TacheUserQuery">
		<![CDATA[
			select count(1)
			from  sys_users a

		]]>
		<where>
			a.delete_state = 0
			<if test='managerFlag=="0"'>
				and a.user_id in (select b.user_id
				from task_tache_manager b
				where b.tache_id = #{tacheId,jdbcType=NUMERIC}
				)
			</if>
			<if test='managerFlag=="1"'>
				and a.user_id not in (select b.user_id
				from task_tache_manager b
				where b.tache_id = #{tacheId,jdbcType=NUMERIC}
				)
			</if>
		</where>
	</select>

	<select id="selectTacheUserCount" resultType="long"
		parameterType="TacheUserQuery">
		<![CDATA[
			select count(1)
			from sys_users a
		]]>
		<where>
			a.delete_state = 0
			<choose>
				<when test="tacheIdIsNot=='not'">
					and a.user_id not in (select b.user_id from task_type_tache_user b
					<where>
						b.delete_state = 0
						<if test="@Ognl@isNotEmpty(tacheId)">
							and b.tache_id = #{tacheId,jdbcType=NUMERIC}
						</if>
					</where>
					)
				</when>
				<when test="tacheIdIsNot=='all'">
					and 1 = 1
				</when>
				<otherwise>
					and a.user_id in (select b.user_id from task_type_tache_user b
					<where>
						b.delete_state = 0
						<if test="@Ognl@isNotEmpty(tacheId)">
							and b.tache_id = #{tacheId,jdbcType=NUMERIC}
						</if>
					</where>
					)
				</otherwise>
			</choose>
		</where>
	</select>

	<!-- 添加权限和人员关联操作 -->
	<insert id="insertTacheUser" parameterType="TacheUser"
		useGeneratedKeys="true" keyProperty="id"> 
		<![CDATA[
		insert into task_type_tache_user(tache_id,
						user_id,
						delete_state)
  					 values (#{tacheId,jdbcType=NUMERIC},
							 #{userId,jdbcType=NUMERIC},
							 0)
		]]>
	</insert>


	<!-- 删除权限和人员关联操作 -->
	<delete id="deleteTacheUser" parameterType="TacheUser">
		<![CDATA[
			delete from task_type_tache_user where tache_id = #{tacheId,jdbcType=NUMERIC}
			and user_id = #{userId,jdbcType=NUMERIC}
		]]>
	</delete>

	<!-- 修改权限管理员操作 -->
	<update id="updateManager" parameterType="TacheUser">

		update task_tache
		<set>
			<if test="userId != null">STAFF_ID = #{userId,jdbcType=NUMERIC},</if>
			<if test="userName != null">STAFF_NAME = #{userName,jdbcType=VARCHAR},</if>
		</set>
		where TACHE_ID=#{tacheId, jdbcType=NUMERIC}
	</update>

	<select id="selectTacheUserListOfOrder" resultMap="tacheUserResultMap" parameterType="TacheUserQuery">
		select tttu.`tache_id`, su.`USER_ID`, su.`USER_NAME`
		from task_order tor, task_type_tache ttt, task_type_tache_user tttu, sys_users su
		where tor.`version` = ttt.`version`
		and ttt.`TACHE_ID` = tttu.`tache_id`
		and tttu.`user_id` = su.`USER_ID`
		and tttu.`delete_state` = '0'
		and su.`DELETE_STATE` = '0'
		and tor.`ORDER_ID` = #{orderId, jdbcType=NUMERIC}
	</select>

	<insert id="insertManager" parameterType="TacheUser">
		insert into task_tache_manager(user_id, tache_id)
		values(
			#{userId, jdbcType=NUMERIC},
			#{tacheId, jdbcType=NUMERIC}
		)
	</insert>

	<delete id="deleteManager" parameterType="TacheUser">
		delete from task_tache_manager
		where user_id = #{userId, jdbcType=NUMERIC}
		and tache_id = #{tacheId, jdbcType=NUMERIC}
	</delete>
</mapper>